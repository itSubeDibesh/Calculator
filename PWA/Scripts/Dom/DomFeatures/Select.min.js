import{Debug}from"./Debug.min.js";let selectedElements=[];export class Select extends Debug{check={class:el=>"class"===document.getElementsByClassName(el)[0].attributes[0].name,id:el=>"id"===document.getElementById(el).attributes.id.name,name:el=>"name"===document.getElementsByName(el)[0].attributes[2].name,tag:el=>Boolean(document.getElementsByTagName(el)[0].localName===el)};checkFactory(selectorType){return el=>{try{return selectorType(el)}catch(error){return!1}}}isClassElement=this.checkFactory(this.check.class);isIdElement=this.checkFactory(this.check.id);isNameElement=this.checkFactory(this.check.name);isTagElement=this.checkFactory(this.check.tag);elementType=elementName=>this.isIdElement(elementName)?"Id":this.isClassElement(elementName)?"Class":this.isNameElement(elementName)?"Name":this.isTagElement(elementName)?"Tag":"Unknown";selectedElements=selectedElements;pickFactory(element){const factory=selectorType=>(this.selectedElements.push(selectorType),selectorType);switch(this.elementType(element)){case"Id":return factory(document.getElementById(element));case"Class":return factory(document.getElementsByClassName(element));case"Name":return factory(document.getElementsByName(element));case"Tag":return factory(document.getElementsByTagName(element));default:return this.error.push({selectorType:this.elementType(element),element:element,timeStamp:Date(),error:"Not Found",message:`Element [${element}] Not Found in DOM`,errorPriority:this.errorPriority[2]}),{status:"Failure",message:`Element [${element}] Not Found in DOM`}}}pick=this.pickFactory}