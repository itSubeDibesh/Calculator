import{DOM,Inherit}from"../../Dom/Dom.min.js";import{ExtractCalculationElements}from"../ExtractCalculationElements.min.js";export class EquationSolver extends DOM{constructor(){super(DOM),this.elementsExtract=new ExtractCalculationElements}calculate(inputString){if("string"==typeof inputString){const result=this.equationSolver(inputString);let show;if(NaN!==result){const c=result+"";show=c.includes("NaN")?"Input":"Result"}return"number"==typeof result?{status:"Success",result:result,show:show}:(this.error.push({inputString:inputString,timeStamp:(new Date).toString(),error:"Operator Not Found",message:`No operation sign like [${this.elementsExtract.operators().split("")}] exists in inputString[${inputString}]`,errorPriority:this.errorPriority[2]}),{status:"Failure",Message:`No operation sign like [${this.elementsExtract.operators().split("")}] exists in inputString[${inputString}]`})}return this.error.push({inputString:inputString,timeStamp:(new Date).toString(),error:"Invalid Input",message:`Invalid inputString type of ${typeof inputString}, string inputString only accepeted`,errorPriority:this.errorPriority[2]}),{status:"Failure",Message:`Invalid inputString type of ${typeof inputString}, string inputString only accepeted`}}equationSolver(inputString){const el=this.elementsExtract.operationElements(inputString),o=el.operator,x=el.preOperand,y=el.postOperand,count=el.operatorCount;if(1!==count)return eval(inputString);switch(o[0]){case"+":return parseFloat(x+y);case"-":return parseFloat(x-y);case"*":return parseFloat(x*y);case"/":return parseFloat(x/y);case"%":return parseFloat(y*x/100);default:return 0}}}