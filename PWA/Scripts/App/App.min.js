import{DOM,Element,Select}from"../Dom/Dom.min.js";import{ClassFeature}from"../Dom/DomElements/ElementsFeatures/ClassFeature.min.js";import{jsonDataSet}from"./appDetails.min.js";export class App extends DOM{constructor(){super(DOM),this.displayError(),this.appInformation=jsonDataSet.appInformation,this.app=this.pick("app"),this.calcButtons={},this.calcButtons.allButtons=[],this.calcButtons.operatorButtons=[],this.calcButtons.superButtons=[],this.calcButtons.numberButtons=[],this.offlineDiv=this.pick("offline"),this.offlineDiv.style.display="none",this.log("|-> App ready to initialize.")}setAppDetails=()=>{const appDetails=this.pick("appDetails"),about=new Element("p");about.setInnerHTML(`\n            <img src="./Assets/Images/favicon-32.png" class="pb-1"\n            alt="Logo" height="20"> ${this.appInformation.appName} <br>\n            Version : ${this.appInformation.version} <br>\n            Github : <a href="${this.appInformation.github.link}">${this.appInformation.github.name}</a><br>\n            Android : <a href="${this.appInformation.android.link}"> ${this.appInformation.android.name} </a><br>\n            IOS : <a href="${this.appInformation.ios.link}"> ${this.appInformation.ios.name} </a><br>\n            Windows : <a href="${this.appInformation.windows.link}"> ${this.appInformation.windows.name} </a><br>\n            Mac : <a href="${this.appInformation.mac.link}"> ${this.appInformation.mac.name} </a><br>\n            Linux : <a href="${this.appInformation.linux.link}"> ${this.appInformation.linux.name} </a><br>\n            Browser Extension : <a href="${this.appInformation.extension.link}"> ${this.appInformation.extension.name} </a><br>\n        `),about.insertTo(appDetails)};init=()=>{this.log(`|-> Initializing App using [${app.id.toUpperCase()} ID]`),this.setAppDetails(),this.addDomEvents(),this.setCalculatorElements(),this.log(`|-> App Initialization Completed at [${(new Date).toString("HH:mm:ss.sss")}]`),this.log("|-> App Ready To Use")};setStatus=()=>{this.status=this.pick("status"),this.status.classList.add("badge"),this.status.classList.add("badge-success"),this.status.innerText=navigator.onLine?"Online":"Offline",this.log(`|-> Setting Application Status [${(navigator.onLine?"Online":"Offline").toUpperCase()}]`)};setOfline=()=>{this.status=this.pick("status"),this.status.classList.replace("badge-success","badge-danger"),this.status.innerText="Offline",this.offlineDiv.style.display="block",this.app.style.display="none",this.log("| |-> Application Offline.")};setOnline=()=>{this.status=this.pick("status"),this.status.classList.replace("badge-danger","badge-success"),this.status.innerText="Online",this.offlineDiv.style.display="none",this.app.style.display="block",this.log("| |-> Application Online.")};copyClipBoard=()=>{const elements=document.querySelectorAll(".copyToMyClipBoard");elements.forEach(el=>{el.addEventListener("click",ev=>{this.copyToClipboard(el.previousSibling.previousSibling.children[1].innerText),this.showCopyClipboard(),setTimeout(()=>{this.hideCopyClipboard()},1e3)})})};addDomEvents=()=>{addEventListener("load",event=>{this.setStatus()}),addEventListener("offline",event=>{this.setOfline()}),addEventListener("online",event=>{this.setOnline()}),this.pick("clearhistory").addEventListener("click",this.clearHistory)};setCalculatorElements=()=>{let buttonMainColumns=[],buttonRows=[],buttonElementsCol=[],buttons=[];const calculatorButton=jsonDataSet.calculatorButton,aboutSvg=(new Select).pick("aboutSvg"),settingSvg=(new Select).pick("settingSvg"),historySvg=(new Select).pick("historySvg"),themeSvg=(new Select).pick("themeSvg"),calculatorDiv=(new Select).pick("calculatorDiv"),author=(new Select).pick("author"),calculatorInputCol=new Element("div"),calculatorInputColHeight=new Element("div"),calculatorInput=new Element("input"),coppiedToClipBoardMain=new Element("div"),coppiedToClipBoard=new Element("div"),authorLink=new Element("a"),onlineStats=new Element("span");calculatorInputCol.add("col-12 pb-5"),calculatorInputColHeight.add("h-200"),calculatorInput.add("w-100 h-100 text-right pr-3 bg-transparent border border-danger"),calculatorInput.setAttribute(jsonDataSet.calculatorInputAttributes),calculatorInput.insertTo(calculatorInputColHeight),calculatorInputColHeight.insertTo(calculatorInputCol),calculatorInputCol.insertTo(calculatorDiv);for(let index=0;index<calculatorButton.length;index++){buttonMainColumns[index]=new Element("div"),buttonMainColumns[index].add("col-12 pb-1"),buttonRows[index]=new Element("div"),buttonRows[index].add("row");for(let indexJ=0;indexJ<calculatorButton[index].length;indexJ++)buttonElementsCol[indexJ]=new Element("div"),buttonElementsCol[indexJ].add(calculatorButton[index][indexJ].buttonColSize),buttons[indexJ]=new Element("button"),buttons[indexJ].add(calculatorButton[index][indexJ].class),buttons[indexJ].setAttribute([{Key:"id",Value:calculatorButton[index][indexJ].identity},{Key:"name",Value:calculatorButton[index][indexJ].identity}]),this.calcButtons.allButtons.push(calculatorButton[index][indexJ].identity),buttons[indexJ].setInnerText(calculatorButton[index][indexJ].value),buttons[indexJ].insertTo(buttonElementsCol[indexJ]),buttonElementsCol[indexJ].insertTo(buttonRows[index]);buttonRows[index].insertTo(buttonMainColumns[index]),buttonMainColumns[index].insertTo(calculatorDiv)}buttonMainColumns=null,buttonRows=null,buttonElementsCol=null,buttons=null,coppiedToClipBoardMain.add("col-12 pb-1 text-center"),coppiedToClipBoardMain.setAttribute([{Key:"id",Value:"copiedToClipboard"}]),coppiedToClipBoardMain.element.style.display="none",coppiedToClipBoard.add("badge-success rounded-pill"),coppiedToClipBoard.setInnerText("Copied To Clipboard"),coppiedToClipBoard.insertTo(coppiedToClipBoardMain),coppiedToClipBoardMain.insertTo(calculatorDiv),onlineStats.add("badge badge-success"),onlineStats.setAttribute([{Key:"Id",Value:"status"}]),onlineStats.setInnerText("Online"),authorLink.setAttribute(jsonDataSet.authorDetails.attributes),authorLink.setInnerHTML(jsonDataSet.authorDetails.authorName),author.innerHTML+="Made with ❤️ by ",author.append(authorLink.element),author.innerHTML+=" ",author.append(onlineStats.element),this.setSVG(aboutSvg,"aboutSvg"),this.setSVG(settingSvg,"settingSvg"),this.setSVG(historySvg,"historySvg"),this.setSVG(themeSvg,"themeSvg"),this.calcButtons.allButtons.forEach(el=>{el[0].includes("O")&&this.calcButtons.operatorButtons.push(el),el[0].includes("S")&&this.calcButtons.superButtons.push(el),el[0].includes("N")&&this.calcButtons.numberButtons.push(el)}),this.log(`| |-> Initialized Calculator Elements using [${calculatorDiv.id.toUpperCase()} ID]`)};showCopyClipboard=()=>{this.pick("copiedToClipboard").style.display="block"};hideCopyClipboard=()=>{this.pick("copiedToClipboard").style.display="none"};setSVG=(elementArray,jsonDataSetSvgName)=>{for(let index=0;index<elementArray.length;index++)elementArray[index].prepend(this.parseSvgStringToSVG(jsonDataSet.svg[jsonDataSetSvgName]))};addToHistory=(equation,result)=>{const history=(new Select).pick("historyDataSet");if("object"!=typeof history)throw"Element Not Found of Type Error";{const li=`<li class="mb-2">\n               <code class="eqation bg-dark text-light p-1">\n                    <span class="operation">${equation}</span> = <span class="operationResult">${result}</span>\n                </code>\n            &nbsp; &nbsp;\n            <a class="badge badge-pill badge-primary  copyToMyClipBoard" href="#">Copy Result</a>\n            </li>`;history.append(this.parseStringToHTML(li))}};clearHistory=()=>{this.pick("historyDataSet").innerHTML=""};appEnvironments={Production:!0,Development:!1};setEnvironments=environment=>{const oldLog=this.log,oldError=this.logError;environment?(this.clear(),this.log("|-> Production Mode Enabled"),this.disableLog(),this.disableError(),this.log=null,this.logError=null):(this.log=oldLog,this.logError=oldError,this.log("|-> Development Mode Enabled"),this.enableLog(),this.enableError())};darkTheme=()=>{for(let index=0;index<this.pick("themeChanger").length;index++)new ClassFeature(this.pick("themeChanger")[index]).add("bg-dark border-light");this.pick("ol")[0].classList.add("bg-secondary"),this.pick("result").classList.add("text-light");for(let index=0;index<this.pick("card").length;index++)new ClassFeature(this.pick("card")[index]).add("bg-dark text-light border-light")};lightTheme=()=>{for(let index=0;index<this.pick("themeChanger").length;index++)new ClassFeature(this.pick("themeChanger")[index]).remove("bg-dark border-light");this.pick("ol")[0].classList.remove("bg-secondary"),this.pick("result").classList.remove("text-light");for(let index=0;index<this.pick("card").length;index++)new ClassFeature(this.pick("card")[index]).remove("bg-dark text-light border-light")};theme=(color="light")=>{localStorage.setItem("theme",color),"light"===localStorage.getItem("theme")?this.lightTheme():this.darkTheme()};initTheme=()=>{const myThis=this;this.pick("themeLight").addEventListener("click",(function(){myThis.theme("light")})),this.pick("themeDark").addEventListener("click",(function(){myThis.theme("dark")})),"dark"===localStorage.getItem("theme")?this.theme("dark"):this.theme()}}