export class ClassFeature{constructor(element){this.element=element,this.list=element.classList,this.length=element.classList.length}coreType={add:0,remove:1,tooggle:2};coreFactory=(classString,type)=>{if("string"==typeof classString){if(0!==classString.length)return classString.split(" ").forEach(item=>type===this.coreType.add?this.list.add(item):type===this.coreType.remove?this.list.remove(item):void(this.length=this.list.length));throw new SyntaxError("Empty String","classString must not be empty")}if("object"!=typeof classString)throw new TypeError("Invalid input Type, Expected Object");if(0===classString.length)throw new SyntaxError("Empty Object","classString must not be empty");if(type===this.coreType.tooggle){const result=[];for(let index=0;index<classString.length;index++)result.push(this.list.toggle(classString[index].token,classString[index].force));return this.length=this.list.length,result}};add=classString=>this.coreFactory(classString,this.coreType.add);contains=className=>this.list.contains(className);forEach=(value,key,parent)=>this.list.forEach(value,key,parent);item=index=>this.list.item(index);entries=(number,string)=>this.list.entries(number,string);keys=number=>this.list.keys(number);remove=classString=>this.coreFactory(classString,this.coreType.remove);replace=(oldToken,newToken)=>this.list.replace(oldToken,newToken);supports=token=>this.list.supports(token);toString=()=>this.list.toString();toggle=token=>this.coreFactory(token,this.coreType.tooggle);value=()=>this.list.value;values=()=>this.list.values()}